# MIT License

# Copyright (c) 2024 The HuggingFace Team

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import lighteval.tasks.default_prompts as prompt
from lighteval.metrics.metrics import Metrics
from lighteval.tasks.lighteval_task import LightevalTaskConfig


"""Beyond the Imitation Game: Quantifying and extrapolating the capabilities of language models
166 tasks from bigbench benchmark.

https://arxiv.org/abs/2206.04615
"""


abstract_narrative_understanding = LightevalTaskConfig(
    name="bigbench:abstract_narrative_understanding",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="abstract_narrative_understanding",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

anachronisms = LightevalTaskConfig(
    name="bigbench:anachronisms",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="anachronisms",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

analogical_similarity = LightevalTaskConfig(
    name="bigbench:analogical_similarity",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="analogical_similarity",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

analytic_entailment = LightevalTaskConfig(
    name="bigbench:analytic_entailment",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="analytic_entailment",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

arithmetic_bb = LightevalTaskConfig(
    name="bigbench:arithmetic_bb",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="arithmetic",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc, Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

ascii_word_recognition = LightevalTaskConfig(
    name="bigbench:ascii_word_recognition",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="ascii_word_recognition",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

authorship_verification = LightevalTaskConfig(
    name="bigbench:authorship_verification",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="authorship_verification",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

auto_categorization = LightevalTaskConfig(
    name="bigbench:auto_categorization",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="auto_categorization",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.bleu],
    stop_sequence=["\n"],
    version=0,
)

auto_debugging = LightevalTaskConfig(
    name="bigbench:auto_debugging",
    suite=["lighteval"],
    prompt_function=prompt.bigbench_linefeed_before_and_after_query,
    hf_repo="tasksource/bigbench",
    hf_subset="auto_debugging",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=100,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=None,
    version=0,
)

bbq_lite_json = LightevalTaskConfig(
    name="bigbench:bbq_lite_json",
    suite=["lighteval"],
    prompt_function=prompt.bigbench_linefeed_before_whitespace_after_query,
    hf_repo="tasksource/bigbench",
    hf_subset="bbq_lite_json",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

bridging_anaphora_resolution_barqa = LightevalTaskConfig(
    name="bigbench:bridging_anaphora_resolution_barqa",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="bridging_anaphora_resolution_barqa",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

causal_judgment = LightevalTaskConfig(
    name="bigbench:causal_judgment",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="causal_judgment",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

cause_and_effect = LightevalTaskConfig(
    name="bigbench:cause_and_effect",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="cause_and_effect",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

checkmate_in_one = LightevalTaskConfig(
    name="bigbench:checkmate_in_one",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="checkmate_in_one",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc, Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

chess_state_tracking = LightevalTaskConfig(
    name="bigbench:chess_state_tracking",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="chess_state_tracking",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

chinese_remainder_theorem = LightevalTaskConfig(
    name="bigbench:chinese_remainder_theorem",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="chinese_remainder_theorem",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

cifar10_classification = LightevalTaskConfig(
    name="bigbench:cifar10_classification",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="cifar10_classification",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

code_line_description = LightevalTaskConfig(
    name="bigbench:code_line_description",
    suite=["lighteval"],
    prompt_function=prompt.bigbench_linefeed_before_and_after_query,
    hf_repo="tasksource/bigbench",
    hf_subset="code_line_description",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

codenames = LightevalTaskConfig(
    name="bigbench:codenames",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="codenames",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.rouge_t5, Metrics.bleu],
    stop_sequence=["\n"],
    version=0,
)

color = LightevalTaskConfig(
    name="bigbench:color",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="color",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[
        Metrics.rouge_t5,
        Metrics.bleu,
        Metrics.loglikelihood_acc,
        Metrics.exact_match(sample_params={"strip_strings": False}),
    ],
    stop_sequence=["\n"],
    version=0,
)

common_morpheme = LightevalTaskConfig(
    name="bigbench:common_morpheme",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="common_morpheme",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

conceptual_combinations = LightevalTaskConfig(
    name="bigbench:conceptual_combinations",
    suite=["lighteval"],
    prompt_function=prompt.bigbench_linefeed_before_whitespace_after_query,
    hf_repo="tasksource/bigbench",
    hf_subset="conceptual_combinations",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

conlang_translation = LightevalTaskConfig(
    name="bigbench:conlang_translation",
    suite=["lighteval"],
    prompt_function=prompt.bigbench_whitespace_after_query,
    hf_repo="tasksource/bigbench",
    hf_subset="conlang_translation",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=100,
    metrics=[Metrics.rouge_t5, Metrics.bleu, Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=[".", ";", "!", "?"],
    version=0,
)

contextual_parametric_knowledge_conflicts = LightevalTaskConfig(
    name="bigbench:contextual_parametric_knowledge_conflicts",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="contextual_parametric_knowledge_conflicts",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.rouge_t5, Metrics.loglikelihood_acc, Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

crash_blossom = LightevalTaskConfig(
    name="bigbench:crash_blossom",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="crash_blossom",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

crass_ai = LightevalTaskConfig(
    name="bigbench:crass_ai",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="crass_ai",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

cryobiology_spanish = LightevalTaskConfig(
    name="bigbench:cryobiology_spanish",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="cryobiology_spanish",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

cryptonite = LightevalTaskConfig(
    name="bigbench:cryptonite",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="cryptonite",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

cs_algorithms = LightevalTaskConfig(
    name="bigbench:cs_algorithms",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="cs_algorithms",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

dark_humor_detection = LightevalTaskConfig(
    name="bigbench:dark_humor_detection",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="dark_humor_detection",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

date_understanding = LightevalTaskConfig(
    name="bigbench:date_understanding",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="date_understanding",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

disambiguation_qa = LightevalTaskConfig(
    name="bigbench:disambiguation_qa",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="disambiguation_qa",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

discourse_marker_prediction = LightevalTaskConfig(
    name="bigbench:discourse_marker_prediction",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="discourse_marker_prediction",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

disfl_qa = LightevalTaskConfig(
    name="bigbench:disfl_qa",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="disfl_qa",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

dyck_languages = LightevalTaskConfig(
    name="bigbench:dyck_languages",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="dyck_languages",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

elementary_math_qa = LightevalTaskConfig(
    name="bigbench:elementary_math_qa",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="elementary_math_qa",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

emoji_movie = LightevalTaskConfig(
    name="bigbench:emoji_movie",
    suite=["lighteval"],
    prompt_function=prompt.bigbench_linefeed_before_whitespace_after_query,
    hf_repo="tasksource/bigbench",
    hf_subset="emoji_movie",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[
        Metrics.rouge_t5,
        Metrics.bleu,
        Metrics.loglikelihood_acc,
        Metrics.exact_match(sample_params={"strip_strings": False}),
    ],
    stop_sequence=["\n"],
    version=0,
)

emojis_emotion_prediction = LightevalTaskConfig(
    name="bigbench:emojis_emotion_prediction",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="emojis_emotion_prediction",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

empirical_judgments = LightevalTaskConfig(
    name="bigbench:empirical_judgments",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="empirical_judgments",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

english_proverbs = LightevalTaskConfig(
    name="bigbench:english_proverbs",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="english_proverbs",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

english_russian_proverbs = LightevalTaskConfig(
    name="bigbench:english_russian_proverbs",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="english_russian_proverbs",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

entailed_polarity = LightevalTaskConfig(
    name="bigbench:entailed_polarity",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="entailed_polarity",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

entailed_polarity_hindi = LightevalTaskConfig(
    name="bigbench:entailed_polarity_hindi",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="entailed_polarity_hindi",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

epistemic_reasoning = LightevalTaskConfig(
    name="bigbench:epistemic_reasoning",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="epistemic_reasoning",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

evaluating_information_essentiality = LightevalTaskConfig(
    name="bigbench:evaluating_information_essentiality",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="evaluating_information_essentiality",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

fact_checker = LightevalTaskConfig(
    name="bigbench:fact_checker",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="fact_checker",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

fantasy_reasoning = LightevalTaskConfig(
    name="bigbench:fantasy_reasoning",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="fantasy_reasoning",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

few_shot_nlg = LightevalTaskConfig(
    name="bigbench:few_shot_nlg",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="few_shot_nlg",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.bleu, Metrics.bleurt],
    stop_sequence=["\n"],
    version=0,
)

figure_of_speech_detection = LightevalTaskConfig(
    name="bigbench:figure_of_speech_detection",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="figure_of_speech_detection",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

formal_fallacies_syllogisms_negation = LightevalTaskConfig(
    name="bigbench:formal_fallacies_syllogisms_negation",
    suite=["lighteval"],
    prompt_function=prompt.bigbench_linefeed_before_whitespace_after_query,
    hf_repo="tasksource/bigbench",
    hf_subset="formal_fallacies_syllogisms_negation",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

gem = LightevalTaskConfig(
    name="bigbench:gem",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="gem",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.bleu, Metrics.rouge_t5],
    stop_sequence=["\n"],
    version=0,
)

gender_inclusive_sentences_german = LightevalTaskConfig(
    name="bigbench:gender_inclusive_sentences_german",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="gender_inclusive_sentences_german",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

general_knowledge = LightevalTaskConfig(
    name="bigbench:general_knowledge",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="general_knowledge",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

geometric_shapes = LightevalTaskConfig(
    name="bigbench:geometric_shapes",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="geometric_shapes",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[
        Metrics.rouge_t5,
        Metrics.bleu,
        Metrics.loglikelihood_acc,
        Metrics.exact_match(sample_params={"strip_strings": False}),
    ],
    stop_sequence=["\n"],
    version=0,
)

goal_step_wikihow = LightevalTaskConfig(
    name="bigbench:goal_step_wikihow",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="goal_step_wikihow",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

gre_reading_comprehension = LightevalTaskConfig(
    name="bigbench:gre_reading_comprehension",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="gre_reading_comprehension",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

hhh_alignment = LightevalTaskConfig(
    name="bigbench:hhh_alignment",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="hhh_alignment",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=-1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

hindi_question_answering = LightevalTaskConfig(
    name="bigbench:hindi_question_answering",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="hindi_question_answering",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.bleu, Metrics.rouge_t5, Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

hindu_knowledge = LightevalTaskConfig(
    name="bigbench:hindu_knowledge",
    suite=["lighteval"],
    prompt_function=prompt.bigbench_linefeed_before_whitespace_after_query,
    hf_repo="tasksource/bigbench",
    hf_subset="hindu_knowledge",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

hinglish_toxicity = LightevalTaskConfig(
    name="bigbench:hinglish_toxicity",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="hinglish_toxicity",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

human_organs_senses = LightevalTaskConfig(
    name="bigbench:human_organs_senses",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="human_organs_senses",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

hyperbaton = LightevalTaskConfig(
    name="bigbench:hyperbaton",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="hyperbaton",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

identify_math_theorems = LightevalTaskConfig(
    name="bigbench:identify_math_theorems",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="identify_math_theorems",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

identify_odd_metaphor = LightevalTaskConfig(
    name="bigbench:identify_odd_metaphor",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="identify_odd_metaphor",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

implicatures = LightevalTaskConfig(
    name="bigbench:implicatures",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="implicatures",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

implicit_relations = LightevalTaskConfig(
    name="bigbench:implicit_relations",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="implicit_relations",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

intent_recognition = LightevalTaskConfig(
    name="bigbench:intent_recognition",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="intent_recognition",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

international_phonetic_alphabet_nli = LightevalTaskConfig(
    name="bigbench:international_phonetic_alphabet_nli",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="international_phonetic_alphabet_nli",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

international_phonetic_alphabet_transliterate = LightevalTaskConfig(
    name="bigbench:international_phonetic_alphabet_transliterate",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="international_phonetic_alphabet_transliterate",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.bleu, Metrics.rouge_t5, Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

intersect_geometry = LightevalTaskConfig(
    name="bigbench:intersect_geometry",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="intersect_geometry",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

irony_identification = LightevalTaskConfig(
    name="bigbench:irony_identification",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="irony_identification",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

kanji_ascii = LightevalTaskConfig(
    name="bigbench:kanji_ascii",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="kanji_ascii",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

kannada = LightevalTaskConfig(
    name="bigbench:kannada",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="kannada",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

key_value_maps = LightevalTaskConfig(
    name="bigbench:key_value_maps",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="key_value_maps",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

known_unknowns = LightevalTaskConfig(
    name="bigbench:known_unknowns",
    suite=["lighteval"],
    prompt_function=prompt.bigbench_linefeed_before_whitespace_after_query,
    hf_repo="tasksource/bigbench",
    hf_subset="known_unknowns",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

language_games = LightevalTaskConfig(
    name="bigbench:language_games",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="language_games",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.bleu, Metrics.rouge_t5, Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

language_identification = LightevalTaskConfig(
    name="bigbench:language_identification",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="language_identification",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

linguistic_mappings = LightevalTaskConfig(
    name="bigbench:linguistic_mappings",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="linguistic_mappings",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

linguistics_puzzles = LightevalTaskConfig(
    name="bigbench:linguistics_puzzles",
    suite=["lighteval"],
    prompt_function=prompt.bigbench_whitespace_after_query,
    hf_repo="tasksource/bigbench",
    hf_subset="linguistics_puzzles",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=100,
    metrics=[Metrics.bleu, Metrics.rouge_t5, Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=None,
    version=0,
)

logic_grid_puzzle = LightevalTaskConfig(
    name="bigbench:logic_grid_puzzle",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="logic_grid_puzzle",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

logical_args = LightevalTaskConfig(
    name="bigbench:logical_args",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="logical_args",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

logical_deduction = LightevalTaskConfig(
    name="bigbench:logical_deduction",
    suite=["lighteval"],
    prompt_function=prompt.bigbench_whitespace_after_query,
    hf_repo="tasksource/bigbench",
    hf_subset="logical_deduction",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

logical_fallacy_detection = LightevalTaskConfig(
    name="bigbench:logical_fallacy_detection",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="logical_fallacy_detection",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

logical_sequence = LightevalTaskConfig(
    name="bigbench:logical_sequence",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="logical_sequence",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

mathematical_induction = LightevalTaskConfig(
    name="bigbench:mathematical_induction",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="mathematical_induction",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

matrixshapes = LightevalTaskConfig(
    name="bigbench:matrixshapes",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="matrixshapes",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

metaphor_boolean = LightevalTaskConfig(
    name="bigbench:metaphor_boolean",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="metaphor_boolean",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

metaphor_understanding = LightevalTaskConfig(
    name="bigbench:metaphor_understanding",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="metaphor_understanding",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

minute_mysteries_qa = LightevalTaskConfig(
    name="bigbench:minute_mysteries_qa",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="minute_mysteries_qa",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc, Metrics.rouge_t5],
    stop_sequence=["\n"],
    version=0,
)

misconceptions = LightevalTaskConfig(
    name="bigbench:misconceptions",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="misconceptions",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

misconceptions_russian = LightevalTaskConfig(
    name="bigbench:misconceptions_russian",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="misconceptions_russian",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

mnist_ascii = LightevalTaskConfig(
    name="bigbench:mnist_ascii",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="mnist_ascii",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

modified_arithmetic = LightevalTaskConfig(
    name="bigbench:modified_arithmetic",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="modified_arithmetic",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

moral_permissibility = LightevalTaskConfig(
    name="bigbench:moral_permissibility",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="moral_permissibility",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

movie_dialog_same_or_different = LightevalTaskConfig(
    name="bigbench:movie_dialog_same_or_different",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="movie_dialog_same_or_different",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

movie_recommendation = LightevalTaskConfig(
    name="bigbench:movie_recommendation",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="movie_recommendation",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

mult_data_wrangling = LightevalTaskConfig(
    name="bigbench:mult_data_wrangling",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="mult_data_wrangling",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

navigate = LightevalTaskConfig(
    name="bigbench:navigate",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="navigate",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

nonsense_words_grammar = LightevalTaskConfig(
    name="bigbench:nonsense_words_grammar",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="nonsense_words_grammar",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

novel_concepts = LightevalTaskConfig(
    name="bigbench:novel_concepts",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="novel_concepts",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

object_counting = LightevalTaskConfig(
    name="bigbench:object_counting",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="object_counting",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

odd_one_out = LightevalTaskConfig(
    name="bigbench:odd_one_out",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="odd_one_out",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

operators = LightevalTaskConfig(
    name="bigbench:operators",
    suite=["lighteval"],
    prompt_function=prompt.bigbench_whitespace_after_query,
    hf_repo="tasksource/bigbench",
    hf_subset="operators",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=20,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

paragraph_segmentation = LightevalTaskConfig(
    name="bigbench:paragraph_segmentation",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="paragraph_segmentation",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

parsinlu_qa = LightevalTaskConfig(
    name="bigbench:parsinlu_qa",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="parsinlu_qa",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

parsinlu_reading_comprehension = LightevalTaskConfig(
    name="bigbench:parsinlu_reading_comprehension",
    suite=["lighteval"],
    prompt_function=prompt.bigbench_linefeed_before_whitespace_after_query,
    hf_repo="tasksource/bigbench",
    hf_subset="parsinlu_reading_comprehension",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=100,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=None,
    version=0,
)

penguins_in_a_table = LightevalTaskConfig(
    name="bigbench:penguins_in_a_table",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="penguins_in_a_table",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc, Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

periodic_elements = LightevalTaskConfig(
    name="bigbench:periodic_elements",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="periodic_elements",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

persian_idioms = LightevalTaskConfig(
    name="bigbench:persian_idioms",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="persian_idioms",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

phrase_relatedness = LightevalTaskConfig(
    name="bigbench:phrase_relatedness",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="phrase_relatedness",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

physical_intuition = LightevalTaskConfig(
    name="bigbench:physical_intuition",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="physical_intuition",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

physics = LightevalTaskConfig(
    name="bigbench:physics",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="physics",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

physics_questions = LightevalTaskConfig(
    name="bigbench:physics_questions",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="physics_questions",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.bleu, Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

play_dialog_same_or_different = LightevalTaskConfig(
    name="bigbench:play_dialog_same_or_different",
    suite=["lighteval"],
    prompt_function=prompt.bigbench_linefeed_before_whitespace_after_query,
    hf_repo="tasksource/bigbench",
    hf_subset="play_dialog_same_or_different",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

polish_sequence_labeling = LightevalTaskConfig(
    name="bigbench:polish_sequence_labeling",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="polish_sequence_labeling",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.f1_score],
    stop_sequence=["\n"],
    version=0,
)

presuppositions_as_nli = LightevalTaskConfig(
    name="bigbench:presuppositions_as_nli",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="presuppositions_as_nli",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

qa_wikidata = LightevalTaskConfig(
    name="bigbench:qa_wikidata",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="qa_wikidata",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[
        Metrics.bleurt,
        Metrics.bleu,
        Metrics.rouge_t5,
        Metrics.exact_match(sample_params={"strip_strings": False}),
    ],
    stop_sequence=["\n"],
    version=0,
)

question_selection = LightevalTaskConfig(
    name="bigbench:question_selection",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="question_selection",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

real_or_fake_text = LightevalTaskConfig(
    name="bigbench:real_or_fake_text",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="real_or_fake_text",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

reasoning_about_colored_objects = LightevalTaskConfig(
    name="bigbench:reasoning_about_colored_objects",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="reasoning_about_colored_objects",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

repeat_copy_logic = LightevalTaskConfig(
    name="bigbench:repeat_copy_logic",
    suite=["lighteval"],
    prompt_function=prompt.bigbench_whitespace_after_query,
    hf_repo="tasksource/bigbench",
    hf_subset="repeat_copy_logic",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=100,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

rephrase = LightevalTaskConfig(
    name="bigbench:rephrase",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="rephrase",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[
        Metrics.rouge_t5,
        Metrics.bleu,
        Metrics.loglikelihood_acc,
        Metrics.exact_match(sample_params={"strip_strings": False}),
    ],
    stop_sequence=["\n"],
    version=0,
)

rhyming = LightevalTaskConfig(
    name="bigbench:rhyming",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="rhyming",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

riddle_sense = LightevalTaskConfig(
    name="bigbench:riddle_sense",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="riddle_sense",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

ruin_names = LightevalTaskConfig(
    name="bigbench:ruin_names",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="ruin_names",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

salient_translation_error_detection = LightevalTaskConfig(
    name="bigbench:salient_translation_error_detection",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="salient_translation_error_detection",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

scientific_press_release = LightevalTaskConfig(
    name="bigbench:scientific_press_release",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="scientific_press_release",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.bleu, Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

semantic_parsing_in_context_sparc = LightevalTaskConfig(
    name="bigbench:semantic_parsing_in_context_sparc",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="semantic_parsing_in_context_sparc",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.bleu, Metrics.rouge_t5, Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

semantic_parsing_spider = LightevalTaskConfig(
    name="bigbench:semantic_parsing_spider",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="semantic_parsing_spider",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.bleu, Metrics.rouge_t5, Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

sentence_ambiguity = LightevalTaskConfig(
    name="bigbench:sentence_ambiguity",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="sentence_ambiguity",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

similarities_abstraction = LightevalTaskConfig(
    name="bigbench:similarities_abstraction",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="similarities_abstraction",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.bleu, Metrics.rouge_t5, Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

simp_turing_concept = LightevalTaskConfig(
    name="bigbench:simp_turing_concept",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="simp_turing_concept",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

simple_arithmetic_json = LightevalTaskConfig(
    name="bigbench:simple_arithmetic_json",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="simple_arithmetic_json",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

simple_arithmetic_json_multiple_choice = LightevalTaskConfig(
    name="bigbench:simple_arithmetic_json_multiple_choice",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="simple_arithmetic_json_multiple_choice",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

simple_arithmetic_json_subtasks = LightevalTaskConfig(
    name="bigbench:simple_arithmetic_json_subtasks",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="simple_arithmetic_json_subtasks",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

simple_arithmetic_multiple_targets_json = LightevalTaskConfig(
    name="bigbench:simple_arithmetic_multiple_targets_json",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="simple_arithmetic_multiple_targets_json",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.bleu, Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

simple_ethical_questions = LightevalTaskConfig(
    name="bigbench:simple_ethical_questions",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="simple_ethical_questions",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

simple_text_editing = LightevalTaskConfig(
    name="bigbench:simple_text_editing",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="simple_text_editing",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

snarks = LightevalTaskConfig(
    name="bigbench:snarks",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="snarks",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

social_iqa = LightevalTaskConfig(
    name="bigbench:social_iqa",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="social_iqa",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

social_support = LightevalTaskConfig(
    name="bigbench:social_support",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="social_support",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.f1_score_macro],
    stop_sequence=["\n"],
    version=0,
)

sports_understanding = LightevalTaskConfig(
    name="bigbench:sports_understanding",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="sports_understanding",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

strange_stories = LightevalTaskConfig(
    name="bigbench:strange_stories",
    suite=["lighteval"],
    prompt_function=prompt.bigbench_whitespace_after_query,
    hf_repo="tasksource/bigbench",
    hf_subset="strange_stories",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

strategyqa = LightevalTaskConfig(
    name="bigbench:strategyqa",
    suite=["lighteval"],
    prompt_function=prompt.bigbench_linefeed_before_whitespace_after_query,
    hf_repo="tasksource/bigbench",
    hf_subset="strategyqa",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.bleu, Metrics.rouge_t5, Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

sufficient_information = LightevalTaskConfig(
    name="bigbench:sufficient_information",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="sufficient_information",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

suicide_risk = LightevalTaskConfig(
    name="bigbench:suicide_risk",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="suicide_risk",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

swahili_english_proverbs = LightevalTaskConfig(
    name="bigbench:swahili_english_proverbs",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="swahili_english_proverbs",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

swedish_to_german_proverbs = LightevalTaskConfig(
    name="bigbench:swedish_to_german_proverbs",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="swedish_to_german_proverbs",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

symbol_interpretation = LightevalTaskConfig(
    name="bigbench:symbol_interpretation",
    suite=["lighteval"],
    prompt_function=prompt.bigbench_linefeed_before_whitespace_after_query,
    hf_repo="tasksource/bigbench",
    hf_subset="symbol_interpretation",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

tellmewhy = LightevalTaskConfig(
    name="bigbench:tellmewhy",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="tellmewhy",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.bleu, Metrics.rouge_t5],
    stop_sequence=["\n"],
    version=0,
)

temporal_sequences = LightevalTaskConfig(
    name="bigbench:temporal_sequences",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="temporal_sequences",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

tense = LightevalTaskConfig(
    name="bigbench:tense",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="tense",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

timedial = LightevalTaskConfig(
    name="bigbench:timedial",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="timedial",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

topical_chat = LightevalTaskConfig(
    name="bigbench:topical_chat",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="topical_chat",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.bleu, Metrics.rouge_t5, Metrics.loglikelihood_acc, Metrics.bleurt],
    stop_sequence=["\n"],
    version=0,
)

tracking_shuffled_objects = LightevalTaskConfig(
    name="bigbench:tracking_shuffled_objects",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="tracking_shuffled_objects",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

understanding_fables = LightevalTaskConfig(
    name="bigbench:understanding_fables",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="understanding_fables",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

undo_permutation = LightevalTaskConfig(
    name="bigbench:undo_permutation",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="undo_permutation",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

unit_conversion = LightevalTaskConfig(
    name="bigbench:unit_conversion",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="unit_conversion",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

unit_interpretation = LightevalTaskConfig(
    name="bigbench:unit_interpretation",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="unit_interpretation",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

unnatural_in_context_learning = LightevalTaskConfig(
    name="bigbench:unnatural_in_context_learning",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="unnatural_in_context_learning",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

vitaminc_fact_verification = LightevalTaskConfig(
    name="bigbench:vitaminc_fact_verification",
    suite=["lighteval"],
    prompt_function=prompt.bigbench_whitespace_after_query,
    hf_repo="tasksource/bigbench",
    hf_subset="vitaminc_fact_verification",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

what_is_the_tao = LightevalTaskConfig(
    name="bigbench:what_is_the_tao",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="what_is_the_tao",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

which_wiki_edit = LightevalTaskConfig(
    name="bigbench:which_wiki_edit",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="which_wiki_edit",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

winowhy = LightevalTaskConfig(
    name="bigbench:winowhy",
    suite=["lighteval"],
    prompt_function=prompt.bigbench_whitespace_after_query,
    hf_repo="tasksource/bigbench",
    hf_subset="winowhy",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.loglikelihood_acc],
    stop_sequence=["\n"],
    version=0,
)

word_sorting = LightevalTaskConfig(
    name="bigbench:word_sorting",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="word_sorting",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)

word_unscrambling = LightevalTaskConfig(
    name="bigbench:word_unscrambling",
    suite=["lighteval"],
    prompt_function=prompt.bigbench,
    hf_repo="tasksource/bigbench",
    hf_subset="word_unscrambling",
    hf_avail_splits=["default", "train", "validation"],
    evaluation_splits=["default"],
    few_shots_split=None,
    few_shots_select=None,
    generation_size=1,
    metrics=[Metrics.exact_match(sample_params={"strip_strings": False})],
    stop_sequence=["\n"],
    version=0,
)
